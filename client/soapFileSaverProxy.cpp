/* soapFileSaverProxy.cpp
   Generated by gSOAP 2.8.135 for /home/jack-archer/VScode/Own/Ant_Path/server/Ant_protocol.h

gSOAP XML Web services tools
Copyright (C) 2000,2024, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapFileSaverProxy.h"

FileSaverProxy::FileSaverProxy() : soap(SOAP_IO_DEFAULT)
{	FileSaverProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

FileSaverProxy::FileSaverProxy(const FileSaverProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
}

FileSaverProxy::FileSaverProxy(const struct soap &_soap) : soap(_soap)
{ }

FileSaverProxy::FileSaverProxy(const struct soap &_soap, const char *soap_endpoint_url) : soap(_soap)
{
	soap_endpoint = soap_endpoint_url;
}

FileSaverProxy::FileSaverProxy(const char *soap_endpoint_url) : soap(SOAP_IO_DEFAULT)
{	FileSaverProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = soap_endpoint_url;
}

FileSaverProxy::FileSaverProxy(soap_mode iomode) : soap(iomode)
{	FileSaverProxy_init(iomode, iomode);
}

FileSaverProxy::FileSaverProxy(const char *soap_endpoint_url, soap_mode iomode) : soap(iomode)
{	FileSaverProxy_init(iomode, iomode);
	soap_endpoint = soap_endpoint_url;
}

FileSaverProxy::FileSaverProxy(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	FileSaverProxy_init(imode, omode);
}

FileSaverProxy::~FileSaverProxy()
{
	FileSaverProxy::destroy();
}

void FileSaverProxy::FileSaverProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        { "SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL },
        { "SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL },
        { "xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL },
        { "xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL },
        { "ns", "urn:FileSaver", NULL, NULL },
        { NULL, NULL, NULL, NULL} /* end of namespaces[] */
    };
	soap_set_namespaces(this, namespaces);
}

FileSaverProxy *FileSaverProxy::copy()
{	FileSaverProxy *dup = SOAP_NEW_UNMANAGED(FileSaverProxy(*(struct soap*)this));
	return dup;
}

FileSaverProxy& FileSaverProxy::operator=(const FileSaverProxy& rhs)
{	soap_done(this);
	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void FileSaverProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void FileSaverProxy::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	FileSaverProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void FileSaverProxy::soap_noheader()
{	this->header = NULL;
}

::SOAP_ENV__Header *FileSaverProxy::soap_header()
{	return this->header;
}

::SOAP_ENV__Fault *FileSaverProxy::soap_fault()
{	return this->fault;
}

const char *FileSaverProxy::soap_fault_subcode()
{	return ::soap_fault_subcode(this);
}

const char *FileSaverProxy::soap_fault_string()
{	return ::soap_fault_string(this);
}

const char *FileSaverProxy::soap_fault_detail()
{	return ::soap_fault_detail(this);
}

int FileSaverProxy::soap_close_socket()
{	return ::soap_closesock(this);
}

int FileSaverProxy::soap_force_close_socket()
{	return ::soap_force_closesock(this);
}

void FileSaverProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void FileSaverProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *FileSaverProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int FileSaverProxy::send_findPath(const char *soap_endpoint_url, const char *soap_action, struct soap *soap, int x, int y)
{
	struct soap *soap = this;
	struct ns__findPath soap_tmp_ns__findPath;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	soap_tmp_ns__findPath.soap = soap;
	soap_tmp_ns__findPath.x = x;
	soap_tmp_ns__findPath.y = y;
	soap_begin(soap);
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__findPath(soap, &soap_tmp_ns__findPath);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__findPath(soap, &soap_tmp_ns__findPath, "ns:findPath", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__findPath(soap, &soap_tmp_ns__findPath, "ns:findPath", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int FileSaverProxy::recv_findPath(int *result)
{
	struct soap *soap = this;
	struct ns__findPathResponse *soap_tmp_ns__findPathResponse;
	if (!result)
		return soap_closesock(soap);
	soap_default_int(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__findPathResponse = soap_get_ns__findPathResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns__findPathResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_ns__findPathResponse->result)
		*result = *soap_tmp_ns__findPathResponse->result;
	return soap_closesock(soap);
}
/* End of client proxy code */
