/* soapFileSaverProxy.h
   Generated by gSOAP 2.8.135 for /home/jack-archer/VScode/Own/Ant_Path/server/Ant_protocol.h

gSOAP XML Web services tools
Copyright (C) 2000,2024, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapFileSaverProxy_H
#define soapFileSaverProxy_H
#include "soapH.h"

    class SOAP_CMAC FileSaverProxy : public soap {
      public:
        /// Endpoint URL of service 'FileSaverProxy' (change as needed)
        const char *soap_endpoint;
        /// Variables globally declared in /home/jack-archer/VScode/Own/Ant_Path/server/Ant_protocol.h, if any
        /// Construct a proxy with new managing context
        FileSaverProxy();
        /// Copy constructor
        FileSaverProxy(const FileSaverProxy& rhs);
        /// Construct proxy given a managing context
        FileSaverProxy(const struct soap&);
        /// Construct proxy given a managing context and endpoint URL
        FileSaverProxy(const struct soap&, const char *soap_endpoint_url);
        /// Constructor taking an endpoint URL
        FileSaverProxy(const char *soap_endpoint_url);
        /// Constructor taking input and output mode flags for the new managing context
        FileSaverProxy(soap_mode iomode);
        /// Constructor taking endpoint URL and input and output mode flags for the new managing context
        FileSaverProxy(const char *soap_endpoint_url, soap_mode iomode);
        /// Constructor taking input and output mode flags for the new managing context
        FileSaverProxy(soap_mode imode, soap_mode omode);
        /// Destructor deletes deserialized data and its managing context
        virtual ~FileSaverProxy();
        /// Initializer used by constructors
        virtual void FileSaverProxy_init(soap_mode imode, soap_mode omode);
        /// Return a copy that has a new managing context with the same engine state
        virtual FileSaverProxy *copy();
        /// Copy assignment
        FileSaverProxy& operator=(const FileSaverProxy&);
        /// Delete all deserialized data (uses soap_destroy() and soap_end())
        virtual void destroy();
        /// Delete all deserialized data and reset to default
        virtual void reset();
        /// Disables and removes SOAP Header from message by setting soap->header = NULL
        virtual void soap_noheader();
        /// Get SOAP Header structure (i.e. soap->header, which is NULL when absent)
        virtual ::SOAP_ENV__Header *soap_header();
        /// Get SOAP Fault structure (i.e. soap->fault, which is NULL when absent)
        virtual ::SOAP_ENV__Fault *soap_fault();
        /// Get SOAP Fault subcode QName string (NULL when absent)
        virtual const char *soap_fault_subcode();
        /// Get SOAP Fault string/reason (NULL when absent)
        virtual const char *soap_fault_string();
        /// Get SOAP Fault detail XML string (NULL when absent)
        virtual const char *soap_fault_detail();
        /// Close connection (normally automatic, except for send_X ops)
        virtual int soap_close_socket();
        /// Force close connection (can kill a thread blocked on IO)
        virtual int soap_force_close_socket();
        /// Print fault
        virtual void soap_print_fault(FILE*);
    #ifndef WITH_LEAN
    #ifndef WITH_COMPAT
        /// Print fault to stream
        virtual void soap_stream_fault(std::ostream&);
    #endif
        /// Write fault to buffer
        virtual char *soap_sprint_fault(char *buf, size_t len);
    #endif
        //
        /// Web service synchronous operation 'findPath' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int findPath(struct soap *soap, int x, int y, int *result) { return this->findPath(NULL, NULL, soap, x, y, result); }
        /// Web service synchronous operation 'findPath' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int findPath(const char *soap_endpoint_url, const char *soap_action, struct soap *soap, int x, int y, int *result) { return this->send_findPath(soap_endpoint_url, soap_action, soap, x, y) || this->recv_findPath(result) ? this->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_findPath' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_findPath(const char *soap_endpoint_url, const char *soap_action, struct soap *soap, int x, int y);
        /// Web service asynchronous operation 'recv_findPath' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_findPath(int *result);
    };
#endif
